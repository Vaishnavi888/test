apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "yourusername"
        - name: POSTGRES_PASSWORD
          value: "yourpassword"
        - name: POSTGRES_DB
          value: "officehoursdb"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc


2. Configure API Base URL
Modify src/config.js:

js
Copy
Edit
const API_BASE_URL = process.env.REACT_APP_API_URL || "http://localhost:8080";
export default API_BASE_URL;
3. Request Form (RequestForm.js)
jsx
Copy
Edit
import React, { useState } from 'react';
import axios from 'axios';
import API_BASE_URL from './config';

const RequestForm = ({ fetchRequests }) => {
  const [userId, setUserId] = useState('');
  const [details, setDetails] = useState('');
  const [requestType, setRequestType] = useState('');
  const [content, setContent] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!userId || !details || !requestType || !content) {
      alert('Please fill all fields');
      return;
    }

    const newRequest = { userId, details, requestType, content, status: 'Pending' };
    await axios.post(`${API_BASE_URL}/requests`, newRequest);
    fetchRequests();
  };

  return (
    <div>
      <h2>Submit Request</h2>
      <form onSubmit={handleSubmit}>
        <input type="text" placeholder="Your ID" value={userId} onChange={(e) => setUserId(e.target.value)} />
        <textarea placeholder="Details" value={details} onChange={(e) => setDetails(e.target.value)} />
        <select value={requestType} onChange={(e) => setRequestType(e.target.value)}>
          <option value="">Select Type</option>
          <option value="Topic">Request a Topic</option>
          <option value="Question">Ask a Question</option>
        </select>
        <textarea placeholder="Enter Topic/Question" value={content} onChange={(e) => setContent(e.target.value)} />
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default RequestForm;



  Backend (Spring Boot)
1. Add H2 Database Configuration
Modify application.properties to use the H2 database file.

properties
Copy
Edit
# Use file-based H2 database (Persistent Volume or local file)
spring.datasource.url=jdbc:h2:file:/data/officehoursdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
2. Spring Boot Entities & Repositories
Request Model

package com.example.officehours.model;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
public class Request {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String userId;
    private String details;
    private String requestType;
    private String content;
    private String status = "Pending";
}
Request Repository
java
Copy
Edit
package com.example.officehours.repository;

import com.example.officehours.model.Request;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RequestRepository extends JpaRepository<Request, Long> {
}
Request Controller
java
Copy
Edit
package com.example.officehours.controller;

import com.example.officehours.model.Request;
import com.example.officehours.repository.RequestRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/requests")
@CrossOrigin(origins = "*")
public class RequestController {

    private final RequestRepository requestRepository;

    public RequestController(RequestRepository requestRepository) {
        this.requestRepository = requestRepository;
    }

    @PostMapping
    public Request createRequest(@RequestBody Request request) {
        return requestRepository.save(request);
    }

    @GetMapping
    public List<Request> getAllRequests() {
        return requestRepository.findAll();
    }

    @GetMapping("/{id}")
    public Optional<Request> getRequestById(@PathVariable Long id) {
        return requestRepository.findById(id);
    }

    @PutMapping("/{id}")
    public Request updateRequest(@PathVariable Long id, @RequestBody Request updatedRequest) {
        return requestRepository.findById(id).map(request -> {
            request.setStatus(updatedRequest.getStatus());
            return requestRepository.save(request);
        }).orElseThrow(() -> new RuntimeException("Request not found"));
    }
}
Kubernetes Deployment
1. Create Persistent Volume for Database
yaml
Copy
Edit
apiVersion: v1
kind: PersistentVolume
metadata:
  name: h2-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/h2db"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: h2-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
2. Deploy Database Pod
yaml
Copy
Edit
apiVersion: v1
kind: Pod
metadata:
  name: h2-db
spec:
  containers:
    - name: h2-container
      image: oscarfonts/h2
      ports:
        - containerPort: 8082
      volumeMounts:
        - mountPath: "/data"
          name: h2-volume
  volumes:
    - name: h2-volume
      persistentVolumeClaim:
        claimName: h2-pvc
3. Deploy Spring Boot Application Pod
yaml
Copy
Edit
apiVersion: v1
kind: Deployment
metadata:
  name: office-hours-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: office-hours
  template:
    metadata:
      labels:
        app: office-hours
    spec:
      containers:
        - name: office-hours-backend
          image: your-dockerhub/office-hours-backend
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:h2:file:/data/officehoursdb"
          volumeMounts:
            - name: h2-volume
              mountPath: /data
      volumes:
        - name: h2-volume
          persistentVolumeClaim:
            claimName: h2-pvc
4. Deploy React Frontend
yaml
Copy
Edit
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: office-hours-client
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer





You can define the H2 database schema using **JPA Entities** with Hibernate in Spring Boot. 
When using **Spring Data JPA**, Hibernate automatically creates tables based on entity classes if `spring.jpa.hibernate.ddl-auto` is set to `update` or `create-drop`.

---

## **1. Define H2 Database Schema in `schema.sql` (Optional)**
If you want to explicitly define tables and columns in an H2 `.sql` file, create `src/main/resources/schema.sql`:

```sql
CREATE TABLE IF NOT EXISTS request (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    details TEXT NOT NULL,
    request_type VARCHAR(50) NOT NULL,
    content TEXT NOT NULL,
    status VARCHAR(50) DEFAULT 'Pending'
);
```

This ensures the table is created if Hibernate doesn't handle it automatically.

---

## **2. JPA Entity for the `request` Table**
Spring Boot will automatically create this table if `spring.jpa.hibernate.ddl-auto=update` is set.

### **`Request.java`**
```java
package com.example.officehours.model;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Table(name = "request")  // Ensures it maps to the correct table
@Data
public class Request {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "user_id", nullable = false)
    private String userId;

    @Column(name = "details", columnDefinition = "TEXT", nullable = false)
    private String details;

    @Column(name = "request_type", length = 50, nullable = false)
    private String requestType;

    @Column(name = "content", columnDefinition = "TEXT", nullable = false)
    private String content;

    @Column(name = "status", length = 50, nullable = false, columnDefinition = "VARCHAR(50) DEFAULT 'Pending'")
    private String status = "Pending";
}
```

---

## **3. Configure H2 Database for Persistence**
In **`application.properties`**, set the database to store data in a file (`/data/officehoursdb`), ensuring persistence.

```properties
# H2 Database Configuration (File-Based Storage)
spring.datasource.url=jdbc:h2:file:/data/officehoursdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update  # Ensures table creation if missing
```

### **Access H2 Console (For Debugging)**
H2 provides a web interface to inspect the database. Run your Spring Boot app and visit:

```
http://localhost:8080/h2-console
```
- **JDBC URL:** `jdbc:h2:file:/data/officehoursdb`
- **Username:** `sa`
- **Password:** (leave empty)

---

## **4. H2 Persistent Volume in Kubernetes**
To ensure the database file remains intact after pod restarts, deploy **H2 Database with Persistent Volume**.

### **H2 Persistent Volume (`h2-pv.yaml`)**
```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: h2-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/h2db"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: h2-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### **H2 Database Pod (`h2-db.yaml`)**
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: h2-db
spec:
  containers:
    - name: h2-container
      image: oscarfonts/h2
      ports:
        - containerPort: 8082
      volumeMounts:
        - mountPath: "/data"
          name: h2-volume
  volumes:
    - name: h2-volume
      persistentVolumeClaim:
        claimName: h2-pvc
```

---

### **Final Steps**
1. **Start Spring Boot App**
   ```sh
   mvn spring-boot:run
   ```
2. **Verify Table Creation**
   - Open **http://localhost:8080/h2-console**
   - Connect using `jdbc:h2:file:/data/officehoursdb`
   - Run `SELECT * FROM request;`

3. **Deploy to Kubernetes**
   ```sh
   kubectl apply -f h2-pv.yaml
   kubectl apply -f h2-db.yaml
   ```











deployment action steps : 
You can define the H2 database schema using **JPA Entities** with Hibernate in Spring Boot. When using **Spring Data JPA**, Hibernate automatically creates tables based on entity classes if `spring.jpa.hibernate.ddl-auto` is set to `update` or `create-drop`.

---

## **1. Define H2 Database Schema in `schema.sql` (Optional)**
If you want to explicitly define tables and columns in an H2 `.sql` file, create `src/main/resources/schema.sql`:

```sql
CREATE TABLE IF NOT EXISTS request (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    details TEXT NOT NULL,
    request_type VARCHAR(50) NOT NULL,
    content TEXT NOT NULL,
    status VARCHAR(50) DEFAULT 'Pending'
);
```

This ensures the table is created if Hibernate doesn't handle it automatically.

---

## **2. JPA Entity for the `request` Table**
Spring Boot will automatically create this table if `spring.jpa.hibernate.ddl-auto=update` is set.

### **`Request.java`**
```java
package com.example.officehours.model;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Table(name = "request")  // Ensures it maps to the correct table
@Data
public class Request {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "user_id", nullable = false)
    private String userId;

    @Column(name = "details", columnDefinition = "TEXT", nullable = false)
    private String details;

    @Column(name = "request_type", length = 50, nullable = false)
    private String requestType;

    @Column(name = "content", columnDefinition = "TEXT", nullable = false)
    private String content;

    @Column(name = "status", length = 50, nullable = false, columnDefinition = "VARCHAR(50) DEFAULT 'Pending'")
    private String status = "Pending";
}
```

---

## **3. Configure H2 Database for Persistence**
In **`application.properties`**, set the database to store data in a file (`/data/officehoursdb`), ensuring persistence.

```properties
# H2 Database Configuration (File-Based Storage)
spring.datasource.url=jdbc:h2:file:/data/officehoursdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update  # Ensures table creation if missing
```

### **Access H2 Console (For Debugging)**
H2 provides a web interface to inspect the database. Run your Spring Boot app and visit:

```
http://localhost:8080/h2-console
```
- **JDBC URL:** `jdbc:h2:file:/data/officehoursdb`
- **Username:** `sa`
- **Password:** (leave empty)

---

## **4. H2 Persistent Volume in Kubernetes**
To ensure the database file remains intact after pod restarts, deploy **H2 Database with Persistent Volume**.

### **H2 Persistent Volume (`h2-pv.yaml`)**
```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: h2-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/h2db"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: h2-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### **H2 Database Pod (`h2-db.yaml`)**
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: h2-db
spec:
  containers:
    - name: h2-container
      image: oscarfonts/h2
      ports:
        - containerPort: 8082
      volumeMounts:
        - mountPath: "/data"
          name: h2-volume
  volumes:
    - name: h2-volume
      persistentVolumeClaim:
        claimName: h2-pvc
```

---

### **Final Steps**
1. **Start Spring Boot App**
   ```sh
   mvn spring-boot:run
   ```
2. **Verify Table Creation**
   - Open **http://localhost:8080/h2-console**
   - Connect using `jdbc:h2:file:/data/officehoursdb`
   - Run `SELECT * FROM request;`

3. **Deploy to Kubernetes**
   ```sh
   kubectl apply -f h2-pv.yaml
   kubectl apply -f h2-db.yaml
   ```

3. Persistent Storage for H2 Database
H2 must persist data even if pods restart. Use Persistent Volume (PV) and Persistent Volume Claim (PVC).

h2-pv.yaml
yaml
Copy
Edit
apiVersion: v1
kind: PersistentVolume
metadata:
  name: h2-pv
  namespace: dev
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/h2db"  # Local storage for dev (Change for production)
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: h2-pvc
  namespace: dev
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
Apply it:

sh
Copy
Edit
kubectl apply -f h2-pv.yaml
4. Deploy H2 Database as a Pod
Run H2 in a separate pod with the mounted volume.

h2-db.yaml
yaml
Copy
Edit
apiVersion: v1
kind: Deployment
metadata:
  name: h2-db
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: h2-db
  template:
    metadata:
      labels:
        app: h2-db
    spec:
      containers:
        - name: h2-container
          image: oscarfonts/h2
          ports:
            - containerPort: 8082
          volumeMounts:
            - mountPath: "/data"
              name: h2-volume
      volumes:
        - name: h2-volume
          persistentVolumeClaim:
            claimName: h2-pvc
Apply it:

sh
Copy
Edit
kubectl apply -f h2-db.yaml
5. Create ConfigMap for Environment Variables
This stores database configurations for Spring Boot.

configmap.yaml
yaml
Copy
Edit
apiVersion: v1
kind: ConfigMap
metadata:
  name: spring-config
  namespace: dev
data:
  SPRING_DATASOURCE_URL: "jdbc:h2:file:/data/officehoursdb"
  SPRING_DATASOURCE_DRIVER_CLASS_NAME: "org.h2.Driver"
  SPRING_DATASOURCE_USERNAME: "sa"
  SPRING_DATASOURCE_PASSWORD: ""
  SPRING_JPA_DATABASE_PLATFORM: "org.hibernate.dialect.H2Dialect"
  SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
Apply it:

sh
Copy
Edit
kubectl apply -f configmap.yaml
6. Deploy Spring Boot Application
Define the Spring Boot App Deployment with a reference to h2-db.

springboot-deployment.yaml
yaml
Copy
Edit
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-app
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: springboot-app
  template:
    metadata:
      labels:
        app: springboot-app
    spec:
      containers:
        - name: springboot-container
          image: your-dockerhub-username/officehours-app:latest  # Replace with your image
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: spring-config
          volumeMounts:
            - mountPath: "/data"
              name: h2-volume
      volumes:
        - name: h2-volume
          persistentVolumeClaim:
            claimName: h2-pvc
Apply it:

sh
Copy
Edit
kubectl apply -f springboot-deployment.yaml
7. Expose Services
Expose Spring Boot App & H2 Database as services.

service.yaml
yaml
Copy
Edit
apiVersion: v1
kind: Service
metadata:
  name: springboot-service
  namespace: dev
spec:
  selector:
    app: springboot-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer  # Change to ClusterIP if using internally
---
apiVersion: v1
kind: Service
metadata:
  name: h2-service
  namespace: dev
spec:
  selector:
    app: h2-db
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
  type: ClusterIP  # Internal service
Apply it:

sh
Copy
Edit
kubectl apply -f service.yaml
8. Deployment Steps
Build & Push Docker Image

sh
Copy
Edit
mvn clean package
docker build -t your-dockerhub-username/officehours-app:latest .
docker push your-dockerhub-username/officehours-app:latest
Apply Kubernetes Files

sh
Copy
Edit
kubectl apply -f namespace.yaml
kubectl apply -f h2-pv.yaml
kubectl apply -f h2-db.yaml
kubectl apply -f configmap.yaml
kubectl apply -f springboot-deployment.yaml
kubectl apply -f service.yaml
Verify Deployment

sh
Copy
Edit
kubectl get pods -n dev
kubectl get svc -n dev
Access H2 Console

Open http://localhost:8082 (if port-forwarding)
JDBC URL: jdbc:h2:file:/data/officehoursdb
Username: sa
Password: (leave empty)

